<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gary Chen&#39;s Blog</title>
  
  
  <link href="https://ergodica10002.github.io/atom.xml" rel="self"/>
  
  <link href="https://ergodica10002.github.io/"/>
  <updated>2021-07-03T16:41:30.000Z</updated>
  <id>https://ergodica10002.github.io/</id>
  
  <author>
    <name>Gary Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BIP32、BIP39、BIP44筆記</title>
    <link href="https://ergodica10002.github.io/2021/07/04/%E7%AD%86%E8%A8%98/BIP32%E3%80%81BIP39%E3%80%81BIP44%E7%AD%86%E8%A8%98/"/>
    <id>https://ergodica10002.github.io/2021/07/04/%E7%AD%86%E8%A8%98/BIP32%E3%80%81BIP39%E3%80%81BIP44%E7%AD%86%E8%A8%98/</id>
    <published>2021-07-03T16:41:30.000Z</published>
    <updated>2021-07-03T16:41:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>BIP(Bitcoin Improvement Protocals)是Bitcoin社群為了增進Bitcoin的使用效率，使其更於方便使用而建立，其中BIP32、BIP39、BIP44定義了HD Wallet的使用規範與細節。以下是個人閱讀白皮書的筆記，希望能幫助自己or他人理解這些協定與背後原理。</p><p>另外，有關BIP的相關文件可以至<a href="https://github.com/bitcoin/bips">bitcoin/bips</a>查看。</p><span id="more"></span><h2 id="BIP32"><a href="#BIP32" class="headerlink" title="BIP32"></a>BIP32</h2><p><a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">BIP32</a>定義了什麼是HD Wallet(Hierarchical Deterministic Wallets)。</p><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>錢包(wallet)內含私鑰與公鑰(private key and public key)。一個private key能夠生成一個public key(by ECC)，而傳遞交易資訊的address是由public key經Sha-256生成。驗證所有交易的是個人持有的private key，要擁有private key，才能證明某筆交易與你有關。<br>重複使用同一個address理論上沒問題，但為隱私問題，Bitcoin仍建議每個address最好只使用一次。然而換address就意味著換private key，這使得一個錢包要裝一大堆的private key，而一把private key又是256bit的亂數，十分不好管理。</p><div class="note info"><p>根據BIP32，過去的做法如下:</p><blockquote><p>In order to avoid the necessity for a backup after every transaction, (by default) 100 keys are cached in a pool of reserve keys. Still, these wallets are not intended to be shared and used on several systems simultaneously</p></blockquote></div><p>因此BIP32就定義了一套用key生成key的方式(Child Key Derivation, a.k.a CKD)。一把key可以有很多個child key，而每個child key又能再生成很多個child key。如此一來自然就有非常多個address，而最重要的就是源頭的parent key，擁有它就能擁有所有的key，即能證明用這些address做的交易的合法性。<br>這做法的另一個優點是，你能夠發放不同的child key給不同人，而這些人使用這些key和其生成的address，都能代表擁有parent key的你，給予他們child key也不會洩漏你的資訊(child key cannot trace back to parent key)。這對公司、企業的商業管理提供了很大的便利性。</p><h3 id="Child-Key-Derivation-CKD"><a href="#Child-Key-Derivation-CKD" class="headerlink" title="Child Key Derivation(CKD)"></a>Child Key Derivation(CKD)</h3><h4 id="Definition-ECC"><a href="#Definition-ECC" class="headerlink" title="Definition: ECC"></a>Definition: ECC</h4><p>此處公鑰的生成是藉由私鑰搭配橢圓曲線常數積(ECSM)生成。使用的橢圓曲線為<a href="https://en.bitcoin.it/wiki/Secp256k1"><em>secp256k1</em></a>，以下簡稱此橢圓曲線為E。令E的base point作P，設私鑰為k，則生成的公鑰為K=point(k)=k*P。此安全性建立在橢圓曲線上的離散對數問題，即給定橢圓曲線上的一點Q=k*P(公鑰)，很難還原出常數k。</p><h4 id="Definition-Extended-Key"><a href="#Definition-Extended-Key" class="headerlink" title="Definition: Extended Key"></a>Definition: Extended Key</h4><p>在BIP32中一對extended key pair包含一把extended private key(寫作(k,c))與一把extended public key(寫作(K,c))。其中k為一256bit的數字，代表原本的私鑰；K為用E搭配常數k生成的點(K=point(k)=k*P)，代表原本的公鑰。c稱做chain code，共256bit，為增加安全性設立。extended private key與extended public key的c是相同的。<br>因此，一組extended key pair的extended private key與extended public key都是512bit，且其後256bit(chain code)均相同。</p><h4 id="Definition-Hardened"><a href="#Definition-Hardened" class="headerlink" title="Definition: Hardened"></a>Definition: Hardened</h4><p>給定一個parent extended key與index，CKD能夠生成相應的child key。其中child key又有分hardened跟non-hardened，hardened的意思是<strong>無法從parent extended public key生成驗證</strong>，必須要有parent extended private key；而non-hardened則相反，<strong>僅憑parent extended public key即可生成</strong>。</p><h4 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h4><p>以下介紹CKD的實作細節。給定一把parent extended key(private:<em>(kpar,cpar)</em> or public:<em>(Kpar,cpar)</em>)與index i(i &lt; 2^32)，CKD定義了以下操作:</p><ol><li><p>Private Parent Key -&gt; Private Child Key: CKDpriv((kpar, cpar), i) → (ki, ci)</p><ul><li>確認Hardened or Non=hardened:<ul><li>Hardened(if i &gt;= 2^31): 令I=HMAC-SHA512(Key=cpar,Data=0x00||kpar||i)</li><li>Non-hardened(if i &lt; 2^31): 令I=HMAC-SHA512(Key=cpar,Data=point(kpar)||i)</li><li>注意兩者的差別。Hardened是直接用parent private key去生成，而non-hardened則是將private key轉public key後使用public key去生成。</li></ul></li><li>將I分成兩個均32byte長的序列，稱IL與IR。</li><li>Return child key ki為IL+kpar。</li><li>Return child chain code ci為IR。</li><li>萬一發生IL大於E的order或ki=0，則return error，使用者須換一個index i。注意此發生的機率小於2^-127。</li></ul></li><li><p>Public Parent Key -&gt; Public Child Key: CKDpub((Kpar, cpar), i) → (Ki, ci)<br>此方法與前面相似，注意根據定義這裡生成的child key只可能是non-hardened版本。</p><ul><li>確認Hardened or Non=hardened:<ul><li>Hardened(if i &gt;= 2^31): 回傳error。</li><li>Non-hardened(if i &lt; 2^31): 令I=HMAC-SHA512(Key=cpar,Data=Kpar||i)。</li></ul></li><li>將I分成兩個均32byte長的序列，稱IL與IR。</li><li>Return child key ki為point(IL)+Kpar。</li><li>Return child chain code ci為IR。</li><li>萬一發生IL大於E的order或Ki為無窮遠點，則return error，使用者須換一個index i。</li></ul></li><li><p>Private Parent Key -&gt; Public Child Key:<br>定義函數N((k,c))-&gt;(K,c)，作用為給定一把extended private key，生成其對應的extended public key。換句話說，K=point(k)，c相同不變。<br>用private parent key生成public child key有兩種方法:</p><ul><li>N(CKDpriv((kpar, cpar), i)) (hardened or non-hardened)。</li><li>CKDpub(N(kpar, cpar), i) (non-hardened only)。</li><li>若1.與2.有看懂，應該會很清楚這兩個操作效果相同，且為甚麼第二個有non-hardened的限制。</li></ul></li><li><p>Public Parent key → Private Child Key:<br>基於橢圓曲線的安全性這件事應該要是做不到的(若做得到就代表secp256k1的ECC不再安全了。)</p></li></ol><h3 id="Key-Tree"><a href="#Key-Tree" class="headerlink" title="Key Tree"></a>Key Tree</h3><p>有了CKD，我們可以為所有錢包中的key建構出一棵樹。令起點root為master extended private key m，N(m)=M。經一次CKD我們可以得到許許多多level-1的key，對level-1的key做CKD，我們可以再得到level-2的key，以此類推。<br>BIP32定義了相關的Notation。例如，CKDpriv(CKDpriv(CKDpriv(m,3H),2),5)將寫作m/3H/2/5。其中H代表使用hardened key，例如3H=3+2^31。<br>在這個notation下，我們有以下的關係:</p><ul><li>N(m/a/b/c) = N(m/a/b)/c = N(m/a)/b/c = N(m)/a/b/c = M/a/b/c。</li><li>N(m/aH/b/c) = N(m/aH/b)/c = N(m/aH)/b/c。</li><li>N(m/aH)不等於N(m)/aH，因為後者是不可行的操作。</li></ul><h3 id="Master-Key-Generation"><a href="#Master-Key-Generation" class="headerlink" title="Master Key Generation"></a>Master Key Generation</h3><p>BIP32定義了一套生成master key的方法。</p><ul><li>用亂數產生器(RNG)生成一個seed S，長度介於128bit~512bit。BIP32建議使用256bit</li><li>計算I=HMAC-SHA512(Key = “Bitcoin seed”, Data = S)。</li><li>將I分成兩個均32byte長的序列，稱IL與IR。</li><li>IL為master private key，IR為master chain code。</li><li>若IL=0或大於E的order，此master key無效，需重新生成S。</li></ul><p>如圖：<br><img src="https://github.com/bitcoin/bips/raw/master/bip-0032/derivation.png" alt="BIP32 Tree"></p><h3 id="Wallet-Structure"><a href="#Wallet-Structure" class="headerlink" title="Wallet Structure"></a>Wallet Structure</h3><p>有關使用BIP32的錢包架構，BIP44有更完整的定義。這邊僅介紹BIP32建議使用的模型。<br>將一個HDW組織成許許多多的account。每個account都有個編號，從0開始。<br>每個account都有兩個key pair chains，一個external一個internal。external用來生成新的public address，而internal用來做其他運算，包含更換、生成address等不需要公開的的事情。</p><ul><li>m/iH/0/k代表master key m底下的account i的第k組external keypair。</li><li>m/iH/1/k代表master key m底下的account i的第k組internal keypair。</li></ul><h3 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h3><p>BIP32提供了以下的幾種使用情境做參考。</p><ol><li>Full Sharing: m<br>當兩個公司需要使用相同的錢包時，藉由共同持有秘密m，可以讓兩者存取同一個錢包。</li><li>Audits: N(m/*)<br>公司的會計僅需知道所有的收入與支出，因此給予他master public key可讓其得知所有child key的交易資訊。</li><li>Per-office balances: m/iH<br>企業底下的各個部門可以擁有不同的child private key。所有部門的交易均可歸於總部擁有的master key底下，且不同部門也能自己生成address做各自的交易，也允許跨部門間的交易。</li><li>Recurrent Business-to-Business Transaction: N(m/iH/0)<br>當兩個or多個企業有密切頻繁的交易時，可以給予某個account的external chain的extended public key。這樣可以讓各公司輕易更換address，而不用每次交易均要請求一個新的address。</li><li>Unsecure Money Receiver: N(m/iH/0)<br>當使用不安全的伺服器進行交易時，我們僅需給予public address就能接收付款。伺服器只需要知道某個external chain的extended public key，就能付款給錢包持有者。對伺服器進行攻擊的人最多僅能知道此public address對應的錢包獲得了多少錢，無法竊取更多資訊，也無法利用這個錢包進行交易。</li></ol><h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><p>BIP32的安全性建立在使用<em>secp256k1</em>的橢圓曲線公鑰密碼學上。這確保了以下兩點：</p><ol><li><p>給予一個child extended private key (ki,ci)和index i，攻擊者很難得到parent private key。(效率等同於暴力破解2^256的HMAC-SHA512)。</p></li><li><p>給予一些tuples (i,(k,c))(index,extended private key)，攻擊者很難判斷這些是否來自同一個parent extended private key。(效率等同於暴力破解2^256的HMAC-SHA512)。</p><div class="note warning"><p>以下這兩個安全性質並不存在：</p><ol><li>給予一個parent extended public key (Kpar,cpar)和child public key (Ki)，要找到i很困難。</li><li>給予一個parent extended public key (Kpar,cpar)和non-hardened child private key (ki)，要找到parent private key kpar很困難。<br>簡單來說就是private key很重要，不管是不是child key。</li></ol></div><p>BIP32說明保管好private key和public key都很重要。private key提供了使用錢包的安全性，而public key則提供了使用者的隱私(外人無法判斷你有多少錢)。<br>需注意的是，擁有parent extended public key (Kpar,cpar)和任一把non-hardened child private key (ki,ci)將可以推得parent private key (kpar,cpar)。作法如下：</p></li></ol><blockquote><p>根據CKD的定義，ki=IL+kpar，其中IL為chain code cpar、public key Kpar與一個小於2^31的index i經HMAC-SHA512所生成。cpar與Kpar我們已經知道了，而我們可以爆搜index i。藉由重複比對使用(Kpar,cpar)與某個i生成的child public key，與child private key生成的child public key，可以找出正確的i。而只要找出正確的i，即可生成正確的IL，而ki減去IL即可得kpar。</p></blockquote><h2 id="BIP39"><a href="#BIP39" class="headerlink" title="BIP39"></a>BIP39</h2><p><a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki">BIP39</a>定義了如何透過所謂的mnemonic code生成整個HD wallet。</p><h3 id="Motivation-1"><a href="#Motivation-1" class="headerlink" title="Motivation"></a>Motivation</h3><p>在BIP32定義了HD Wallet的建立方式，要對一個錢包進行存取等同於擁有某一個seed，只要有seed就能使用整個錢包。然而seed是一個128bit~512bit的數字，很不好記，BIP39便是提供or定義一套較人性化的方法去生成seed，稱做mnemonic code。透過mnecode code我們可以生成seed，因此記憶seed的問題就變成了記憶mnecode code。</p><h3 id="Generating-the-Mnemonic"><a href="#Generating-the-Mnemonic" class="headerlink" title="Generating the Mnemonic"></a>Generating the Mnemonic</h3><p>BIP39定義一個mnecode須經由一個32bit倍數的entropy去生成。使用者可以用任何方式先生成一個initial entropy，令其長度為ENT。BIP39允許的ENT為128、160、192、224、256。<br>給定一個initial entropy，先生成一個checksum，這個checksum為entropy經SHA256後的前ENT/32 bit，令其長CS。舉例來說，若ENT為128，則checksum為initial entropy做SHA256後的前CS=4個bit。<br>將checksum接到initial entropy的後面，然後切割成每11個bit一組。每組可以換算成一個0~2047的數字，用這個數字至wordlist查表即可得到一個單字。所有單字組成一個mnemonic setence，其長度為MS。<br>下表給定了ENT、CS、MS的關係：</p><ul><li>CS = ENT / 32</li><li>MS = (ENT + CS) / 11</li></ul><table><thead><tr><th align="center">ENT</th><th align="center">CS</th><th align="center">ENT+CS</th><th align="center">MS</th></tr></thead><tbody><tr><td align="center">128</td><td align="center">4</td><td align="center">132</td><td align="center">12</td></tr><tr><td align="center">160</td><td align="center">5</td><td align="center">165</td><td align="center">15</td></tr><tr><td align="center">192</td><td align="center">6</td><td align="center">198</td><td align="center">18</td></tr><tr><td align="center">224</td><td align="center">7</td><td align="center">231</td><td align="center">21</td></tr><tr><td align="center">256</td><td align="center">8</td><td align="center">264</td><td align="center">24</td></tr></tbody></table><h3 id="Wordlist"><a href="#Wordlist" class="headerlink" title="Wordlist"></a>Wordlist</h3><p>BIP39給予的wordlist滿足下列規範：</p><ol><li>Smart Selection of Words:<br>只要打前4個字母，即可唯一的找出wordlist中的某一個單字。這提供了使用wordlist的方便性。</li><li>Similar Words Avoided:<br>使用的單字盡可能的不一樣。如build與built、woman與women、quick與quickly等，不應該重複出現在wordlist裡。這樣可以避免記憶上的困難與實務上出錯的機率。</li><li>Sorted Wordlist:<br>wordlist的內容有經過排序。如此一來一方面可使使用者更有效率的查找單字，例如使用binary search；另一方面也可讓使用trie等資料結構更為方便。</li></ol><p>另外BIP39規定了wordlist必須使用UTF-8 ecoding，並使用Normalization Form Compatibility Decomposition(NFKD)。</p><h3 id="From-Mnemonic-to-Seed"><a href="#From-Mnemonic-to-Seed" class="headerlink" title="From Mnemonic to Seed"></a>From Mnemonic to Seed</h3><p>首先，使用者可以自由定義一個密碼passphrase來更妥善的保護錢包，如未定義則passphrase設為空字串””。<br>BIP39使用了<a href="https://en.wikipedia.org/wiki/PBKDF2">PBKDF2</a>函數去生成512bit的seed。PBKDF2的password參數代入mnemonic sentence(in UTF-8 NFKD)，字串”mnemonic”+passphrase做為salt。遞迴次數iteration count設為2048，且使用HMAC-SHA512做為pseudo-random function。生成長度定為512bit。</p><div class="note info"><p>seed = U1 ^ U2 ^ … ^ U2048<br>U1 = HMAC-SHA512(key=password, message=salt)<br>U2 = HMAC-SHA512(key=password, message=U1)<br>…<br>U2048 = HMAC-SHA512(key=password, message=U2047)</p></div><p>由於生成mnecode sentence與seed的過程可以完全獨立，使用者可以定義自己喜歡的wordlist，或整套wordlist生成規則。不過BIP39仍建議使用他們規範的mnemonic生成規則與他們的wordlist(見下文)。</p><h3 id="Wordlists"><a href="#Wordlists" class="headerlink" title="Wordlists"></a>Wordlists</h3><p>BIP39定義了一套各語言的wordlist，不過它仍建議使用英文的版本。</p><ul><li><a href="https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md">wordlist</a></li></ul><h3 id="Reference-Implementation"><a href="#Reference-Implementation" class="headerlink" title="Reference Implementation"></a>Reference Implementation</h3><p>BIP39也推薦了一套程式來實作：</p><ul><li><a href="https://github.com/trezor/python-mnemonic">python-mnemonic</a></li></ul><p>另外網路上也有相關的網站提供BIP39的實作：</p><ul><li><a href="https://iancoleman.io/bip39/">Mnemonic Code Converter</a></li></ul><h2 id="BIP44"><a href="#BIP44" class="headerlink" title="BIP44"></a>BIP44</h2><p><a href="https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki">BIP44</a>定義了一套基於BIP32的錢包的架構。</p><h3 id="Motivation-2"><a href="#Motivation-2" class="headerlink" title="Motivation"></a>Motivation</h3><p>BIP44的目的是提供一套方便管理不同幣種、不同account、external/internal chain與不同address的錢包架構。</p><h3 id="Path-Levels"><a href="#Path-Levels" class="headerlink" title="Path Levels"></a>Path Levels</h3><p>定義以下的BIP32 path(參考&amp;修改自<a href="#Wallet-Structure">Wallet Structure</a>)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m / purpose&#x27; / coin_type&#x27; / account&#x27; / change / address_index</span><br></pre></td></tr></table></figure><p>其中的<code>&#39;</code>表示使用BIP32 hardened derivation。<br>底下定義每一層的意義。</p><h4 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h4><p>Purpose設成常數44’，代表使用BIP44。這一層使用了hardened derivation。</p><h4 id="Coin-Type"><a href="#Coin-Type" class="headerlink" title="Coin Type"></a>Coin Type</h4><p>這層的目的是為了讓單一一個master node就能使用各式各樣的幣種。每一個加密貨幣都對應一個coin type，如Bitcoin為0，ETH為60等等。這一層使用了hardened derivation。<br>各貨幣的coin type可見<a href="https://github.com/satoshilabs/slips/blob/master/slip-0044.md">Registered coin types for BIP44</a>。</p><h4 id="Account"><a href="#Account" class="headerlink" title="Account"></a>Account</h4><p>這層定義了每一個使用單位account，用來給予不同的使用者。使用者可以將此層想成銀行的帳戶，用來進行捐贈、付款、存錢等等。這一層同樣使用了hardened derivation。<br>BIP44規定了使用者需從index 0開始依序使用account，且必須記錄所有使用過的account，不可以跳號。<br>同理，當引入一個新的seed時，使用者也需要能判斷哪些account已經被使用了。</p><h4 id="Change"><a href="#Change" class="headerlink" title="Change"></a>Change</h4><p>這層只有兩個數字，0或1。0用作external chain，1用作internal chain。這邊定義的external/internal與BIP32講的稍有不同。此處的external是用作公開接收付款等交易的address，而internal是用來作為找零(change)的address。找零的這個internal chain address是不公開的。</p><p>根據<a href="https://www.oreilly.com/library/view/mastering-bitcoin/9781491902639/ch05.html">這篇文章</a>的說明，每一筆在區塊鏈上的交易收入會形成unspent transaction output(UTXO)。UTXO是不可分割的，被記錄在鏈上。在區塊鏈上並沒有所謂的某個account或address的存款，只有某個使用者擁有的的分散的UTXO，而一個使用者的存款即是整個鏈上所有該歸屬於它的UTXO總和。<br>雖然每一筆交易(每一個UTXO)都可以是任意的數目，但一旦交易完成這個UTXO就不再能夠被分割。如果之後使用者欲支付的數目小於一個他擁有的UTXO，就會有所謂找零的動作。</p><h4 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h4><p>每個index即代表了一個address。</p><h3 id="Account-Discovery"><a href="#Account-Discovery" class="headerlink" title="Account Discovery"></a>Account Discovery</h3><p>當我們引入一個新的錢包時(新的seed)，我們使用的software需要去找尋目前已有哪些account被使用過了：</p><ol><li>找出第一個account node(index = 0)</li><li>找出這個account的external chain</li><li>開始遍搜external chain上的所有address<ul><li>如果所有的address都不存在交易紀錄，則回傳當前的account</li><li>如果有找到某個address存在交易紀錄，則account增加1，並重新回到2.</li></ul></li></ol><p>由於account必須要循序使用，不可以跳號，因此這個演算法可以確保真的找到第一個還未被使用的account。</p><h4 id="Address-Gap-Limit"><a href="#Address-Gap-Limit" class="headerlink" title="Address Gap Limit"></a>Address Gap Limit</h4><p>上述的第三步”遍搜所有的address”，最多搜索到address 20就停。意思就是說，我們不考慮20以後的address，也不預期有人會去使用。<br>此外我們只考慮external chain上的address的交易，因為每一筆internal chain上的交易應該都是來自其相應的external chain。</p><p>BIP44希望software去警告使用者使用的address超過20。</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>這邊是複製BIP44給予的example。</p><table><thead><tr><th align="center">coin</th><th align="center">account</th><th align="center">chain</th><th align="center">address</th><th align="center">path</th></tr></thead><tbody><tr><td align="center">Bitcoin</td><td align="center">first</td><td align="center">external</td><td align="center">first</td><td align="center">m / 44’ / 0’ / 0’ / 0 / 0</td></tr><tr><td align="center">Bitcoin</td><td align="center">first</td><td align="center">external</td><td align="center">second</td><td align="center">m / 44’ / 0’ / 0’ / 0 / 1</td></tr><tr><td align="center">Bitcoin</td><td align="center">first</td><td align="center">change</td><td align="center">first</td><td align="center">m / 44’ / 0’ / 0’ / 1 / 0</td></tr><tr><td align="center">Bitcoin</td><td align="center">first</td><td align="center">change</td><td align="center">second</td><td align="center">m / 44’ / 0’ / 0’ / 1 / 1</td></tr><tr><td align="center">Bitcoin</td><td align="center">second</td><td align="center">external</td><td align="center">first</td><td align="center">m / 44’ / 0’ / 1’ / 0 / 0</td></tr><tr><td align="center">Bitcoin</td><td align="center">second</td><td align="center">external</td><td align="center">second</td><td align="center">m / 44’ / 0’ / 1’ / 0 / 1</td></tr><tr><td align="center">Bitcoin</td><td align="center">second</td><td align="center">change</td><td align="center">first</td><td align="center">m / 44’ / 0’ / 1’ / 1 / 0</td></tr><tr><td align="center">Bitcoin</td><td align="center">second</td><td align="center">change</td><td align="center">second</td><td align="center">m / 44’ / 0’ / 1’ / 1 / 1</td></tr><tr><td align="center">Bitcoin Testnet</td><td align="center">first</td><td align="center">external</td><td align="center">first</td><td align="center">m / 44’ / 1’ / 0’ / 0 / 0</td></tr><tr><td align="center">Bitcoin Testnet</td><td align="center">first</td><td align="center">external</td><td align="center">second</td><td align="center">m / 44’ / 1’ / 0’ / 0 / 1</td></tr><tr><td align="center">Bitcoin Testnet</td><td align="center">first</td><td align="center">change</td><td align="center">first</td><td align="center">m / 44’ / 1’ / 0’ / 1 / 0</td></tr><tr><td align="center">Bitcoin Testnet</td><td align="center">first</td><td align="center">change</td><td align="center">second</td><td align="center">m / 44’ / 1’ / 0’ / 1 / 1</td></tr><tr><td align="center">Bitcoin Testnet</td><td align="center">second</td><td align="center">external</td><td align="center">first</td><td align="center">m / 44’ / 1’ / 1’ / 0 / 0</td></tr><tr><td align="center">Bitcoin Testnet</td><td align="center">second</td><td align="center">external</td><td align="center">second</td><td align="center">m / 44’ / 1’ / 1’ / 0 / 1</td></tr><tr><td align="center">Bitcoin Testnet</td><td align="center">second</td><td align="center">change</td><td align="center">first</td><td align="center">m / 44’ / 1’ / 1’ / 1 / 0</td></tr><tr><td align="center">Bitcoin Testnet</td><td align="center">second</td><td align="center">change</td><td align="center">second</td><td align="center">m / 44’ / 1’ / 1’ / 1 / 1</td></tr></tbody></table><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這篇筆記提供了BIP32、BIP39與BIP44的實作細節說明，除了作為個人紀錄外，本意是希望能提供懶得看白皮書的人一些幫助。然而越寫愈多，要想看完好像也不比直接看白皮書輕鬆多少，所以若想真正了解這些協定，建議還是直接看白皮書比較實在。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;BIP(Bitcoin Improvement Protocals)是Bitcoin社群為了增進Bitcoin的使用效率，使其更於方便使用而建立，其中BIP32、BIP39、BIP44定義了HD Wallet的使用規範與細節。以下是個人閱讀白皮書的筆記，希望能幫助自己or他人理解這些協定與背後原理。&lt;/p&gt;
&lt;p&gt;另外，有關BIP的相關文件可以至&lt;a href=&quot;https://github.com/bitcoin/bips&quot;&gt;bitcoin/bips&lt;/a&gt;查看。&lt;/p&gt;</summary>
    
    
    
    <category term="筆記" scheme="https://ergodica10002.github.io/categories/%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="Cryptography" scheme="https://ergodica10002.github.io/tags/Cryptography/"/>
    
    <category term="Bitcoin" scheme="https://ergodica10002.github.io/tags/Bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>[閱讀心得]槍砲病菌與鋼鐵-人類社會的命運</title>
    <link href="https://ergodica10002.github.io/2021/06/26/%E5%BF%83%E5%BE%97/%E6%A7%8D%E7%A0%B2%E7%97%85%E8%8F%8C%E8%88%87%E9%8B%BC%E9%90%B5-%E4%BA%BA%E9%A1%9E%E7%A4%BE%E6%9C%83%E7%9A%84%E5%91%BD%E9%81%8B/"/>
    <id>https://ergodica10002.github.io/2021/06/26/%E5%BF%83%E5%BE%97/%E6%A7%8D%E7%A0%B2%E7%97%85%E8%8F%8C%E8%88%87%E9%8B%BC%E9%90%B5-%E4%BA%BA%E9%A1%9E%E7%A4%BE%E6%9C%83%E7%9A%84%E5%91%BD%E9%81%8B/</id>
    <published>2021-06-25T20:23:26.000Z</published>
    <updated>2021-06-25T20:23:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：Jared Diamond</p></blockquote><p>很早以前就對這本書很感興趣。大三下開學前幾天偶然翻到有關這本書的討論，由於也一陣子沒看書了，便開始翻閱起來。沒想到這一翻就是一個學期。</p><p>當然，支持我看完的動力源於書本的內容。這本書光看書名就很嚇人，稍微翻過書序可以推測出這本書是在講槍砲、病菌與鋼鐵是如何地影響人類社會的命運。然而對於沒看過內文的人，可以先跟你說，這本書的內容不僅遠遠不止於此，連主旨也不甚相同。</p><p>本書的原點來自一個簡單的提問：<br>為什麼今天是新幾內亞將貨物運往美國，而非美國產業將成品銷往新幾內亞？</p><p>要回答這個問題會涉及到這兩個國家歷史上的發展，繼續探究下去，可能會再連結到歐洲人的槍砲、病菌與鋼鐵等三個因素。然而這些都只是中間因素，而非書中所謂的終極因素。換句話說，為什麼是歐洲人發展出槍砲、病菌與鋼鐵進而去侵略十六世紀的世界，而非其他的人種發展出自己的槍砲、病菌、鋼鐵來征服歐洲？</p><span id="more"></span><p>類似這樣的問題還有：</p><ol><li>為什麼地中海沿岸地區有成功培養出自己的地中海型農業，而相似氣候的澳洲西部卻直到歐洲人殖民之前都仍過著狩獵採集的原始生活？</li><li>為什麼中國的經濟與科技發展在唐朝時可謂世界第一，但在晚清時期卻慘遭各國瓜分。</li><li>為什麼當初是歐洲的哥倫布發現新大陸，而不是美洲人坐船“發現”歐亞大陸？</li><li>為什麼歐洲人開拓美洲時是當地原住民遭歐洲帶來的疾病所苦，而不是歐洲人被當地的疾病感染？</li><li>為什麼是大量的黑奴被白人運往新大陸，而非黑人將白人運往自己的部落奴役？</li></ol><p>這樣問下去能不能得到一個終極因素？無止境的追問是沒有意義的，而這本書便是將這些問題追溯到了人類演化的起源。作者引用相當豐富的生物、地理、歷史、人類學、語言學的知識，把這些統整起來，洋洋灑灑寫了500多頁來回答人類社會至今如斯的各種因素。</p><p>總結地說，作者是用這本書在“證明”以下這件事情：<br>「不同民族會有如今的發展不均，是因於其生存的地理環境影響，而不是不同人種的生物遺傳差異。」</p><p>最喜歡這本書的地方在於，它不是一味地灌輸知識給讀者，而是通常會在每個段落前先問一個問題、或講一個故事，引發讀者去思考各種為什麼的同時，一點一點地提供過往學者給出的線索，最後總結出一個合理的解釋。</p><p>另一個讓我喜愛它的因素，在於客觀的描述各種線索帶來的啟示。大一下曾修過李文良老師的通識歷史課《清代臺灣的移民開發與社會》，其中最讓我印象深刻的是，歷史學的不是如何還原過去的真相，而是如果透過各種線索做出合理客觀的解釋。對於已經得到普遍認可的知識、人類學家挖掘出來的文化證據、各個學者提出的假說理論，這本書在引用的同時都會適當的給予限制。藉由探尋每個領域的資料，同時多條線邁進下，找出共同通過的那一個點，進而闡述其所代表的意義。</p><p>第三個讓我喜愛它的原因，在於書本引用的資料相當地豐富。一邊翻閱的同時，一邊也在回憶起中學所學的那些社會知識。事實上，要是沒有國高中社會科的教學，自己閱讀這本書得到的樂趣大概也少個大半，或許看不完序章就放棄了；另一方面，在看書的同時自己也在暗暗後悔，可惜自己沒能把以前教導的知識更好、更完整地記起來。我十分感激中學時期每位老師的教導，讓我沒有放棄學習地理與歷史，讓我能感受到這本書的有趣不致錯失認識它的機會。以前常聽到同學問，為什麼課綱要放地理歷史公民，為什麼教科書要教那些與我無關的知識，品味這本書時得到的暢快很漂亮地解答了這一切。</p><p>談論不同人種的差異容易受人評議。今天我們被教導不同人種之間的平等，學習要去尊重不同民族間的差異。然而卻鮮少有人跟我們說，歷史痕跡上存在的種族歧視，究竟是來自什麼？現今社會的這些不平等，究竟是因為什麼？這些敏感的問題不應該被避而不談，不會試圖詢問就要被扣帽子，不是大人世界不准我們作答的題目。我從這本書得到了解答，那就是生存的地理環境影響了這一切。我相信這不會是唯一答案，也可能錯得離譜，但貫穿全書的這一信念，以及為證明它被提出的各式各樣的證據，都帶給我很多新的啟發。</p><p>在此紀錄這本書授予我的一切，也極力推薦每個讀到這裡的你去翻翻看這本書。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;作者：Jared Diamond&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很早以前就對這本書很感興趣。大三下開學前幾天偶然翻到有關這本書的討論，由於也一陣子沒看書了，便開始翻閱起來。沒想到這一翻就是一個學期。&lt;/p&gt;
&lt;p&gt;當然，支持我看完的動力源於書本的內容。這本書光看書名就很嚇人，稍微翻過書序可以推測出這本書是在講槍砲、病菌與鋼鐵是如何地影響人類社會的命運。然而對於沒看過內文的人，可以先跟你說，這本書的內容不僅遠遠不止於此，連主旨也不甚相同。&lt;/p&gt;
&lt;p&gt;本書的原點來自一個簡單的提問：&lt;br&gt;為什麼今天是新幾內亞將貨物運往美國，而非美國產業將成品銷往新幾內亞？&lt;/p&gt;
&lt;p&gt;要回答這個問題會涉及到這兩個國家歷史上的發展，繼續探究下去，可能會再連結到歐洲人的槍砲、病菌與鋼鐵等三個因素。然而這些都只是中間因素，而非書中所謂的終極因素。換句話說，為什麼是歐洲人發展出槍砲、病菌與鋼鐵進而去侵略十六世紀的世界，而非其他的人種發展出自己的槍砲、病菌、鋼鐵來征服歐洲？&lt;/p&gt;</summary>
    
    
    
    <category term="心得" scheme="https://ergodica10002.github.io/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="Book" scheme="https://ergodica10002.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>[開箱]電腦螢幕 DELL SE2416H</title>
    <link href="https://ergodica10002.github.io/2021/06/14/unboxing/%E9%9B%BB%E8%85%A6%E8%9E%A2%E5%B9%95-DELL-SE2416H/"/>
    <id>https://ergodica10002.github.io/2021/06/14/unboxing/%E9%9B%BB%E8%85%A6%E8%9E%A2%E5%B9%95-DELL-SE2416H/</id>
    <published>2021-06-14T06:25:13.000Z</published>
    <updated>2021-06-14T06:25:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/unboxing/Dell6.jpg" alt="model"></p><p>(圖片來自<a href="https://www.dell.com/zh-tw/work/shop/dell-24-%E9%A1%AF%E7%A4%BA%E5%99%A8-se2416h/apd/210-alci/%E9%A1%AF%E7%A4%BA%E5%99%A8%E5%92%8C%E9%A1%AF%E7%A4%BA%E5%99%A8%E9%85%8D%E4%BB%B6">DELL網站</a>)</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>很早以前就聽說寫程式搭配雙螢幕會很舒適，不過由於一個人在台北宿舍搬運不易，加上也沒有非雙螢幕不可的task，就一直沒有下手。<br>直到最近開始有感覺到多開分頁的需求，像是要把matlab code轉python code，合併兩個repo裡的函式的功能等等的；由於自己會攝影修圖、偶爾也會剪片，有個獨立出來的螢幕處理這些工作顯然會更加方便。<br>於是就在前幾天終於下定決心要入手一個新的螢幕。</p><span id="more"></span><h1 id="選購前的想法："><a href="#選購前的想法：" class="headerlink" title="選購前的想法："></a>選購前的想法：</h1><p>個人第一個想法是要HDMI，除了畫質更細膩外，也是因為個人電腦就是HDMI輸出。螢幕顯示要是IPS，對於顏色與可視角的呈現比較好。螢幕大小購買前大概考慮24吋左右的，主要是不想跟筆電螢幕落差太大，整體高度希望能塞進宿舍的書桌，大概是抓50公分以下。廠牌沒特別要求，只要是大廠都好，維修會比較方便。<br>除此之外的其他功能沒特別的想法，基本上是挑選滿足上述條件的商品中最便宜的。</p><p>於是來到順發3C，經過仔細挑選後選擇了這款 <strong>DELL SE2416H</strong>。</p><h1 id="型號規格"><a href="#型號規格" class="headerlink" title="型號規格"></a>型號規格</h1><p>直接上圖(來自<a href="https://www.dell.com/zh-tw/work/shop/dell-24-%E9%A1%AF%E7%A4%BA%E5%99%A8-se2416h/apd/210-alci/%E9%A1%AF%E7%A4%BA%E5%99%A8%E5%92%8C%E9%A1%AF%E7%A4%BA%E5%99%A8%E9%85%8D%E4%BB%B6">DELL網站</a>)。</p><p><img src="/images/unboxing/Dell5.png" alt="model"></p><h1 id="開箱"><a href="#開箱" class="headerlink" title="開箱"></a>開箱</h1><p>整箱外觀：</p><p><img src="/images/unboxing/Dell1.jpg" alt="Dell1"></p><p>箱子沒有個提手蠻不好拿的。</p><p>內容物包裝很單純，螢幕放在下面一層。</p><p><img src="/images/unboxing/Dell2.jpg" alt="Dell2"></p><p>雖有附上說明書，不過組裝十分簡單，懶得看就直接組起來了。<br>搭配一併買的HDMI線接上筆電後的成果：</p><p><img src="/images/unboxing/Dell3.jpg" alt="Dell3"></p><p>整體上蠻舒適的，兩邊協調沒有不和諧的感覺。<br>螢幕選單有提供多種色彩模式，個人覺得看影片時用Movie體驗很棒。另外可以設定兩個shortcut key，我選擇亮度以及色彩模式。</p><p>剛好有個需要看影片寫評論的作業，有個外接螢幕就方便了。</p><p><img src="/images/unboxing/Dell4.jpg" alt="Dell4"></p><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>作為第一個外接螢幕個人還蠻滿意的，拿來看影片、編輯相片或分頁寫code，使用體驗都相當地好。雖然買完不久就被人家說“能直立的螢幕看paper會很方便”，不過想想如果要再加上其他功能，想比價錢也會再升上去，目前這樣我就十分滿足了，至於胃口會不會被養壞就之後再說吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/unboxing/Dell6.jpg&quot; alt=&quot;model&quot;&gt;&lt;/p&gt;
&lt;p&gt;(圖片來自&lt;a href=&quot;https://www.dell.com/zh-tw/work/shop/dell-24-%E9%A1%AF%E7%A4%BA%E5%99%A8-se2416h/apd/210-alci/%E9%A1%AF%E7%A4%BA%E5%99%A8%E5%92%8C%E9%A1%AF%E7%A4%BA%E5%99%A8%E9%85%8D%E4%BB%B6&quot;&gt;DELL網站&lt;/a&gt;)&lt;/p&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;很早以前就聽說寫程式搭配雙螢幕會很舒適，不過由於一個人在台北宿舍搬運不易，加上也沒有非雙螢幕不可的task，就一直沒有下手。&lt;br&gt;直到最近開始有感覺到多開分頁的需求，像是要把matlab code轉python code，合併兩個repo裡的函式的功能等等的；由於自己會攝影修圖、偶爾也會剪片，有個獨立出來的螢幕處理這些工作顯然會更加方便。&lt;br&gt;於是就在前幾天終於下定決心要入手一個新的螢幕。&lt;/p&gt;</summary>
    
    
    
    <category term="開箱" scheme="https://ergodica10002.github.io/categories/%E9%96%8B%E7%AE%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>[教學]用GitHub Pages+Hexo建立網站分享(2)--NEXT主題</title>
    <link href="https://ergodica10002.github.io/2021/06/07/%E6%95%99%E5%AD%B8/%E7%94%A8Github-Pages-Hexo%E5%BB%BA%E7%AB%8B%E7%B6%B2%E7%AB%99%E5%88%86%E4%BA%AB(2)/"/>
    <id>https://ergodica10002.github.io/2021/06/07/%E6%95%99%E5%AD%B8/%E7%94%A8Github-Pages-Hexo%E5%BB%BA%E7%AB%8B%E7%B6%B2%E7%AB%99%E5%88%86%E4%BA%AB(2)/</id>
    <published>2021-06-07T08:43:17.000Z</published>
    <updated>2021-06-14T06:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>自建立部落格後，又花了不少時間更新內容。這邊就記錄下最近完成的內容。</p><p>另外有個心得是，每次更新頁面設定一定要從頭進行<code>git clean</code>,<code>git generate</code>，否則<code>git deploy</code>後的結果可能會出錯，有機會會和<code>git server</code>不同。另外檢查網站更新情況可以用<code>Ctrl+F5</code>取代單純的<code>F5</code>，確保資料是重新獲取而不是來自cache。</p><p>這篇主要是如何使用NexT主題的基本介紹，個人使用版本是NexT 8.5.0。詳細內容與demo可以參考NexT的<a href="https://theme-next.js.org/">blog</a>。<br>另外本篇內容主要參考自<a href="https://ed521.github.io/2020/05/hexo-next-upgrade/">網站</a>。</p><span id="more"></span><h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h1><ul><li><a href="/2021/06/06/%E6%95%99%E5%AD%B8/%E7%94%A8Github-Pages-Hexo%E5%BB%BA%E7%AB%8B%E7%B6%B2%E7%AB%99%E5%88%86%E4%BA%AB(1)/" title="[教學]用GitHub Pages+Hexo建立網站分享(1)--建立個人blog">[教學]用GitHub Pages+Hexo建立網站分享(1)--建立個人blog</a></li></ul><h1 id="設定tags-categories"><a href="#設定tags-categories" class="headerlink" title="設定tags, categories"></a>設定tags, categories</h1><p>進入個人網站的根目錄，依序輸入指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>接著進入sourcevu，應該會看到新增了兩個資料夾<code>tags</code>,<code>categories</code>，裡面各有一個<code>index.md</code>，修改其中的內容。</p><ul><li>tags:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: #your update date</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure></li><li>categories:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: #your update date</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure></li></ul><p>接著就可以對每篇文章新增所屬的tag及category。其中tag一篇文章可以有好幾個，而categories一篇文章只能有一個。<br>如範例，在文章開頭編輯:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">categories: &quot;教學&quot;</span><br><span class="line">tags: </span><br><span class="line">   - &quot;Github Pages&quot;</span><br><span class="line">   - &quot;Hexo&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>這樣可以讓這篇文章新增在<code>教學</code>這個category下，且帶有<code>Github Pages</code>,<code>Hexo</code>這兩個tag。</p><p>另外可以修改<code>/scaffolds/post.md</code>，讓每次新增文章<code>hexo new post</code>時，都帶有category與tag的設定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">cetegories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="設定主題NexT"><a href="#設定主題NexT" class="headerlink" title="設定主題NexT"></a>設定主題NexT</h1><p>Hexo要新增主題很簡單，只要將該主題的Repo clone到<code>themes/</code>這個資料夾底下就可以了。欲使用<a href="https://github.com/next-theme/hexo-theme-next">NexT主題</a>，在個人的<code>blog</code>跟目錄底下使用指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>這樣會在<code>themes/</code>底下建一個資料夾<code>next/</code>，接者進入<code>_config.yml</code>中修改使用主題成next</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>重新生成就會看到主題變更了。</p><h1 id="NexT基本設定"><a href="#NexT基本設定" class="headerlink" title="NexT基本設定"></a>NexT基本設定</h1><p>打開<code>themes/next/_config.yml</code>。裡面可以設定使用者自己的資料。基本上每個項目都有註解教你各功能代表的意思，底下僅介紹我覺得重要的。</p><h2 id="主題設定"><a href="#主題設定" class="headerlink" title="主題設定"></a>主題設定</h2><p>搜尋檔案找到<code>scheme:</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>NexT設有4種scheme可以選擇(Muse,Mist,Pisces,Gemini)，取消註解即可使用。<br>另外可以選擇深色模式，打開<code>darkmode</code>即可。</p><h2 id="Menu設定"><a href="#Menu設定" class="headerlink" title="Menu設定"></a>Menu設定</h2><p>搜尋檔案找到<code>menu:</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure><p>取消掉註解即可顯示該項目，其中每一個項目裡，<code>||</code>左邊表示愈顯示的內容，右邊則表示使用的icon，icon可以至<a href="https://fontawesome.com/v5.15/icons?d=gallery&p=2">網站</a>找尋自己喜歡的取代。</p><h2 id="頭像設定"><a href="#頭像設定" class="headerlink" title="頭像設定"></a>頭像設定</h2><p>搜尋檔案找到<code>avatar:</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在<code>url</code>裡放入圖片連結即可更改頭像。例如將頭像圖片<code>avatar.jpg</code>放入<code>themes/next/source/images</code>裡，圖片連結就是<code>/images/avatar.jpg</code></p><h2 id="Social設定"><a href="#Social設定" class="headerlink" title="Social設定"></a>Social設定</h2><p>搜尋檔案找到<code>social:</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/Ergodica10002</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:ergodica10002@gmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="attr">FB Page:</span> <span class="string">https://www.facebook.com/gengyuc</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="attr">Instagram:</span> <span class="string">https://instagram.com/garychen_0126</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br></pre></td></tr></table></figure><p>這邊可以設定網站sidebar會顯示的連結，一樣可以修改<code>||</code>右邊的內容來使用想要的圖片。</p><h2 id="footer設定"><a href="#footer設定" class="headerlink" title="footer設定"></a>footer設定</h2><p>搜尋檔案找到<code>footer:</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the year when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2021</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fas</span> <span class="string">fa-camera</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#636363&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>這邊設定網站末尾會有的標示。<code>icon</code>項目可以修改使用的icon，預設是愛心，我將其修改為一台相機，並調整顏色為灰色。<br>另外<code>powered</code>在true的情況下，網站末尾會有類似的文字<br><img src="https://i.imgur.com/tx8ryjc.png"><br>設為false即可關掉。</p><h2 id="程式碼區塊設定"><a href="#程式碼區塊設定" class="headerlink" title="程式碼區塊設定"></a>程式碼區塊設定</h2><p>搜尋檔案找到<code>codeblock:</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">tomorrow-night</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">prism</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure><p>這邊可以修改想要的程式碼樣式，底下的<code>copy button</code>設true可以讓程式碼區塊帶有copy功能。</p><h2 id="右上角Github連結"><a href="#右上角Github連結" class="headerlink" title="右上角Github連結"></a>右上角Github連結</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/Ergodica10002</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure><p>修改link為個人的github網站，這樣網站右上角會有個icon可以進入。</p><h2 id="新增站內文章搜尋功能"><a href="#新增站內文章搜尋功能" class="headerlink" title="新增站內文章搜尋功能"></a>新增站內文章搜尋功能</h2><p>找到底下內容，將<code>enable</code>設為true。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>接著須至terminal上安裝工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>最後在blog的根目錄的<code>_config.yml</code>裡加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章搜尋功能</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure><p>更多細節可以參考<a href="https://github.com/theme-next/hexo-generator-searchdb#Options">這裡</a>。</p><h2 id="更換背景圖片"><a href="#更換背景圖片" class="headerlink" title="更換背景圖片"></a>更換背景圖片</h2><p>在next底下的<code>_config.yml</code>，取消註解掉style這句。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>接著在blog的根目錄的<code>source/</code>新增<code>_data/</code>資料夾，在裡面新增一個檔案<code>styles.styl</code>，裡面寫入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">      background:url(/images/圖片的檔名);</span><br><span class="line">      background-size: cover;</span><br><span class="line">      background-repeat: no-repeat;</span><br><span class="line">      background-attachment: fixed;</span><br><span class="line">      background-position:center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>圖片要放在<code>themes/next/source/images</code>，才能成功讀取。<br>另外可以在上述的<code>source/_data/styles.styl</code>檔案後面加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.main-inner &#123;</span><br><span class="line">      opacity: 0.9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此可以為網站文章設定透明度，讓背景圖片更明顯。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自建立部落格後，又花了不少時間更新內容。這邊就記錄下最近完成的內容。&lt;/p&gt;
&lt;p&gt;另外有個心得是，每次更新頁面設定一定要從頭進行&lt;code&gt;git clean&lt;/code&gt;,&lt;code&gt;git generate&lt;/code&gt;，否則&lt;code&gt;git deploy&lt;/code&gt;後的結果可能會出錯，有機會會和&lt;code&gt;git server&lt;/code&gt;不同。另外檢查網站更新情況可以用&lt;code&gt;Ctrl+F5&lt;/code&gt;取代單純的&lt;code&gt;F5&lt;/code&gt;，確保資料是重新獲取而不是來自cache。&lt;/p&gt;
&lt;p&gt;這篇主要是如何使用NexT主題的基本介紹，個人使用版本是NexT 8.5.0。詳細內容與demo可以參考NexT的&lt;a href=&quot;https://theme-next.js.org/&quot;&gt;blog&lt;/a&gt;。&lt;br&gt;另外本篇內容主要參考自&lt;a href=&quot;https://ed521.github.io/2020/05/hexo-next-upgrade/&quot;&gt;網站&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="教學" scheme="https://ergodica10002.github.io/categories/%E6%95%99%E5%AD%B8/"/>
    
    
    <category term="Github Pages" scheme="https://ergodica10002.github.io/tags/Github-Pages/"/>
    
    <category term="Hexo" scheme="https://ergodica10002.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>[教學]用GitHub Pages+Hexo建立網站分享(1)--建立個人blog</title>
    <link href="https://ergodica10002.github.io/2021/06/06/%E6%95%99%E5%AD%B8/%E7%94%A8Github-Pages-Hexo%E5%BB%BA%E7%AB%8B%E7%B6%B2%E7%AB%99%E5%88%86%E4%BA%AB(1)/"/>
    <id>https://ergodica10002.github.io/2021/06/06/%E6%95%99%E5%AD%B8/%E7%94%A8Github-Pages-Hexo%E5%BB%BA%E7%AB%8B%E7%B6%B2%E7%AB%99%E5%88%86%E4%BA%AB(1)/</id>
    <published>2021-06-06T04:47:23.000Z</published>
    <updated>2021-06-07T14:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>建立個人blog的動機，比起的個人心得分享，更多的是看越來越多朋友建立了自己的blog，心裡就很想跟著玩玩。<br>本篇作為blog第一篇文，就先把整個blog的建立流程記錄起來，以防自己忘記。<br>本文主要參考自<a href="https://blog.jaojaolin.com/%E8%BB%9F%E9%AB%94%E8%88%87%E7%B3%BB%E7%B5%B1/2020-05-06-Hexo-GitPage-%E6%90%AD%E5%BB%BA-Blog-%E6%95%99%E5%AD%B8/">這裡</a>。</p><p>個人建立環境是Windows10+wsl2的Ubuntu 20.04。大部分流程都是在Windows Terminal上完成的，所以基本上都是用Linux指令，完全沒有使用到Windows cmd。</p><div class="note info"><p>Github Pages只支援靜態網頁設計，基本上就是html, css, javascript等，所以只能拿來寫寫部落格或放一些文件，與使用者做互動編譯的動態網頁將無法成功顯示。</p></div><span id="more"></span><h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h1><h2 id="Github-Repo"><a href="#Github-Repo" class="headerlink" title="Github Repo"></a>Github Repo</h2><p>先在<a href="https://github.com/">Github</a>上建立個人Repo，取名做<code>&lt;username&gt;.github.io</code>，<username>填入個人帳號。可見<a href="https://github.com/Ergodica10002/Ergodica10002.github.io">這裡</a>。<br>接著將Repo clone到本地端，個人還是習慣在terminal上運作git。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line"><span class="built_in">cd</span> &lt;username&gt;.github.io.git</span><br></pre></td></tr></table></figure><p>接著可以在Repo內新增<code>index.html</code>，commit+push上去後，應該就能在<code>https://&lt;username&gt;.github.io</code>上看到剛剛編輯的內容了。</p><p>另外到Github上個人的Repo裡，點選Settings-&gt;Pages，可以看到Choose a Theme，裡面已有許多Github預設的主題可以使用。</p><p><img src="https://i.imgur.com/6PgAFYW.png"></p><p>底下還可以修改domain，不過目前也沒這需求，維持原本的github.io就好XD。</p><h2 id="安裝Hexo"><a href="#安裝Hexo" class="headerlink" title="安裝Hexo"></a>安裝Hexo</h2><p>Hexo是個簡單的部落格建立軟體，支援Markdown編輯。雖然是基於Node.js，但個人目前還沒碰過javascript，照著指示也還是完成了。<br>首先先安裝<a href="https://www.npmjs.com/">npm</a>(node package manager)，這是專屬Node.js的套件管理工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure><p>可透過<code>npm --version</code>確認安裝是否成功。</p><p><img src="https://i.imgur.com/hkYW6vk.png"></p><p>接著安裝<code>Hexo-cli</code>，這是能透過terminal操作Hexo的套件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p><code>-g</code>參數能讓我們在全域環境皆能使用。</p><h1 id="建立網頁"><a href="#建立網頁" class="headerlink" title="建立網頁"></a>建立網頁</h1><p>先建立個人專案，透過以下指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>其中<code>blog</code>可以換成自己想要的任何名稱。如果順利應該可以看到當前資料夾多了一個叫<code>blog</code>的資料夾。進入該資料夾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>建立完成後，可以看到裡面已有許多的package。底下說明各檔案意義。</p><ul><li><code>node_modules/</code>: 透過npm安裝的套件會放在這邊。</li><li><code>scaffolds/</code>: 新增貼文的模板。</li><li><code>source/</code>: 新增貼文的原始碼。Markdown 和 HTML 檔案會被處理並放到<code>public</code>資料夾(等等會介紹)。</li><li><code>themes</code>: 貼文的主題。</li><li><code>_config.yml</code>: 網站的設定檔 </li><li><code>package.json</code>: 應用程式的相關資料</li></ul><h2 id="設定網頁資訊"><a href="#設定網頁資訊" class="headerlink" title="設定網頁資訊"></a>設定網頁資訊</h2><p>選擇任意editor打開<code>_config.yml</code>。個人使用sublime。<br>修改網站的基本內容，如圖。</p><p><img src="https://i.imgur.com/HtjNHA4.png"></p><p>可以自己置換相關的資訊。<br>接著為了讓網站內容deploy到Github Pages上，要在<code>_config.yml</code>最後加上底下資訊。</p><p><img src="https://i.imgur.com/10zjCUM.png"></p><h2 id="產生檔案"><a href="#產生檔案" class="headerlink" title="產生檔案"></a>產生檔案</h2><p>將整份專案編譯產生靜態檔案，編譯完後檔案會存在<code>blog/public</code>底下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可先用hexo clean清理目前資料夾中的靜態網頁</span></span><br><span class="line">hexo generate <span class="comment"># or hexo g</span></span><br></pre></td></tr></table></figure><p>個人在這步有出現Error:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FATAL &#123; err:</span><br><span class="line">   TypeError: line.matchAll is not a function</span><br></pre></td></tr></table></figure><p>研究一陣子後發現應是Node.js版本太舊。先安裝nvm(node version manager)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -q0- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash</span><br><span class="line"><span class="comment"># 個人是使用zsh，因此修改成</span></span><br><span class="line"><span class="comment"># wget -q0- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | zsh</span></span><br></pre></td></tr></table></figure><p>接著重啟terminal或重新source .rc檔。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 個人是使用zsh，因此修改成</span></span><br><span class="line"><span class="comment"># source ~/.zshrc</span></span><br></pre></td></tr></table></figure><p>接著確認是否安裝成功。</p><p><img src="https://i.imgur.com/pZB3SbK.png"></p><p>接著透過<code>nvm ls-remote</code>，確認要安裝的版本，個人是安裝LTS。透過<code>nvm install &lt;version&gt;</code>安裝</p><p><img src="https://i.imgur.com/nfTptAp.png"></p><p>現在重新<code>hexo generate</code>應該就可以了。這步驟會將在<code>source</code>裡的<code>Markdown</code>和<code>HTML</code>檔案處理，並放到<code>public</code>資料夾，而<code>public</code>裡就是最後網頁呈現的結果。</p><h2 id="新增文章"><a href="#新增文章" class="headerlink" title="新增文章"></a>新增文章</h2><p>以下透過<code>Markdown</code>語法新增文章。選擇文章標題<code>&quot;title&quot;</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;title&quot;</span></span><br></pre></td></tr></table></figure><p>接著可以在<code>blog/source/_posts</code>看到<code>title.md</code>檔案，編輯後<code>hexo generate</code>就能產生相關網頁文件。</p><h2 id="檢視成果"><a href="#檢視成果" class="headerlink" title="檢視成果"></a>檢視成果</h2><p>可以在本機伺服器啟動網頁看看成果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment">#or hexo s</span></span><br></pre></td></tr></table></figure><p>預設網頁會放在<code>http://localhost:4000</code>。</p><h2 id="部署至Github-Pages"><a href="#部署至Github-Pages" class="headerlink" title="部署至Github Pages"></a>部署至Github Pages</h2><p>透過以下指令將內容push到remote上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>現在可以在<code>https://&lt;username&gt;.github.io</code>上檢視剛剛編輯的成果了！<br><em>網頁更新可能會需要幾分鐘的時間</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;建立個人blog的動機，比起的個人心得分享，更多的是看越來越多朋友建立了自己的blog，心裡就很想跟著玩玩。&lt;br&gt;本篇作為blog第一篇文，就先把整個blog的建立流程記錄起來，以防自己忘記。&lt;br&gt;本文主要參考自&lt;a href=&quot;https://blog.jaojaolin.com/%E8%BB%9F%E9%AB%94%E8%88%87%E7%B3%BB%E7%B5%B1/2020-05-06-Hexo-GitPage-%E6%90%AD%E5%BB%BA-Blog-%E6%95%99%E5%AD%B8/&quot;&gt;這裡&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;個人建立環境是Windows10+wsl2的Ubuntu 20.04。大部分流程都是在Windows Terminal上完成的，所以基本上都是用Linux指令，完全沒有使用到Windows cmd。&lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Github Pages只支援靜態網頁設計，基本上就是html, css, javascript等，所以只能拿來寫寫部落格或放一些文件，與使用者做互動編譯的動態網頁將無法成功顯示。&lt;/p&gt;
&lt;/div&gt;</summary>
    
    
    
    <category term="教學" scheme="https://ergodica10002.github.io/categories/%E6%95%99%E5%AD%B8/"/>
    
    
    <category term="Github Pages" scheme="https://ergodica10002.github.io/tags/Github-Pages/"/>
    
    <category term="Hexo" scheme="https://ergodica10002.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
